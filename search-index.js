var searchIndex = {};
searchIndex['wayland_client'] = {"items":[[0,"","wayland_client","",null,null],[3,"EventIterator","","",null,null],[3,"ProxyId","","",null,null],[4,"Event","","All possible wayland events.",null,null],[13,"Wayland","","",0,null],[5,"is_available","","Checks if the wayland lib is available",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"eventiterator"}],"output":{"name":"eventiterator"}}],[11,"drop","","",1,{"inputs":[{"name":"eventiterator"}],"output":null}],[11,"next","","",1,{"inputs":[{"name":"eventiterator"}],"output":{"name":"option"}}],[0,"egl","","",null,null],[3,"WlEglSurface","wayland_client::egl","",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","",2,{"inputs":[{"name":"wleglsurface"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"destroy","","",2,{"inputs":[{"name":"wleglsurface"}],"output":{"name":"wlsurface"}}],[11,"get_size","","",2,null],[11,"resize","","",2,{"inputs":[{"name":"wleglsurface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"egl_surface_ptr","","",2,null],[11,"egl_surfaceptr","","DEPRECATED",2,null],[11,"drop","","",2,{"inputs":[{"name":"wleglsurface"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"wleglsurface"}],"output":{"name":"wlsurface"}}],[0,"cursor","wayland_client","",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",3,{"inputs":[{"name":"cursortheme"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"cursortheme"}],"output":null}],[11,"name","","Retrieve the name of this cursor.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"string"}}],[11,"image_count","","Retrieve the number of images contained in this\nanimated cursor",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",4,{"inputs":[{"name":"cursor"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",4,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",5,{"inputs":[{"name":"cursorimagebuffer"}],"output":{"name":"wlbuffer"}}],[11,"drop","","",5,{"inputs":[{"name":"cursorimagebuffer"}],"output":null}],[0,"wayland","wayland_client","The core wayland protocol",null,null],[3,"WlCallback","wayland_client::wayland","callback object",null,null],[3,"WlDisplay","","core global object",null,null],[3,"WlRegistry","","global registry object",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[4,"WlCallbackEvent","","",null,null],[13,"Done","","done event",6,null],[4,"WlDisplayEvent","","",null,null],[13,"Error","","fatal error event",7,null],[13,"DeleteId","","acknowledge object ID deletion",7,null],[4,"WlRegistryEvent","","",null,null],[13,"Global","","announce global object",8,null],[13,"GlobalRemove","","announce removal of global object",8,null],[4,"WaylandProtocolEvent","","An event generated by the protocol wayland.",null,null],[13,"WlDisplay","","",9,null],[13,"WlRegistry","","",9,null],[13,"WlCallback","","",9,null],[13,"WlShm","","",9,null],[13,"WlBuffer","","",9,null],[13,"WlDataOffer","","",9,null],[13,"WlDataSource","","",9,null],[13,"WlDataDevice","","",9,null],[13,"WlShellSurface","","",9,null],[13,"WlSurface","","",9,null],[13,"WlSeat","","",9,null],[13,"WlPointer","","",9,null],[13,"WlKeyboard","","",9,null],[13,"WlTouch","","",9,null],[13,"WlOutput","","",9,null],[5,"get_display","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"compositor","","",null,null],[3,"WlCompositor","wayland_client::wayland::compositor","the compositor singleton",null,null],[3,"WlRegion","","region interface",null,null],[3,"WlSurface","","an onscreen surface",null,null],[4,"WlSurfaceEvent","","",null,null],[13,"Enter","","surface enters an output",10,null],[13,"Leave","","surface leaves an output",10,null],[0,"data_device","wayland_client::wayland","",null,null],[3,"WlDataDevice","wayland_client::wayland::data_device","data transfer device",null,null],[3,"WlDataDeviceManager","","data transfer interface",null,null],[3,"WlDataOffer","","offer to transfer data",null,null],[3,"WlDataSource","","offer to transfer data",null,null],[4,"WlDataDeviceEvent","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",11,null],[13,"Enter","","initiate drag-and-drop session",11,null],[13,"Leave","","end drag-and-drop session",11,null],[13,"Motion","","drag-and-drop session motion",11,null],[13,"Drop","","end drag-and-drag session successfully",11,null],[13,"Selection","","advertise new selection",11,null],[4,"WlDataOfferEvent","","",null,null],[13,"Offer","","advertise offered mime type",12,null],[13,"SourceActions","","notify the source-side available actions",12,null],[13,"Action","","notify the selected action",12,null],[4,"WlDataSourceEvent","","",null,null],[13,"Target","","a target accepts an offered mime type",13,null],[13,"Send","","send the data",13,null],[13,"Cancelled","","selection was cancelled",13,null],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",13,null],[13,"DndFinished","","the drag-and-drop operation concluded",13,null],[13,"Action","","notify the selected action",13,null],[0,"WlDataDeviceManagerDndAction","","drag and drop actions",null,null],[3,"WlDataDeviceManagerDndAction","wayland_client::wayland::data_device::WlDataDeviceManagerDndAction","",null,null],[17,"None","","",null,null],[17,"Copy","","",null,null],[17,"Move","","",null,null],[17,"Ask","","",null,null],[11,"hash","","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"eq","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"from_iter","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[0,"output","wayland_client::wayland","",null,null],[3,"WlOutput","wayland_client::wayland::output","compositor output region",null,null],[4,"WlOutputEvent","","",null,null],[13,"Geometry","","properties of the output",15,null],[13,"Mode","","advertise available modes for the output",15,null],[13,"Done","","sent all information about output",15,null],[13,"Scale","","output scaling properties",15,null],[4,"WlOutputSubpixel","","subpixel geometry information",null,null],[13,"Unknown","","",16,null],[13,"None","","",16,null],[13,"HorizontalRgb","","",16,null],[13,"HorizontalBgr","","",16,null],[13,"VerticalRgb","","",16,null],[13,"VerticalBgr","","",16,null],[4,"WlOutputTransform","","transform from framebuffer to output",null,null],[13,"Normal","","",17,null],[13,"T90","","",17,null],[13,"T180","","",17,null],[13,"T270","","",17,null],[13,"Flipped","","",17,null],[13,"Flipped90","","",17,null],[13,"Flipped180","","",17,null],[13,"Flipped270","","",17,null],[0,"WlOutputMode","","mode information",null,null],[3,"WlOutputMode","wayland_client::wayland::output::WlOutputMode","",null,null],[17,"Current","","indicates this is the current mode",null,null],[17,"Preferred","","indicates this is the preferred mode",null,null],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"eq","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"wloutputmode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"from_iter","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"t"}],"output":{"name":"wloutputmode"}}],[0,"seat","wayland_client::wayland","",null,null],[3,"WlKeyboard","wayland_client::wayland::seat","keyboard input device",null,null],[3,"WlPointer","","pointer input device",null,null],[3,"WlSeat","","group of input devices",null,null],[3,"WlTouch","","touchscreen input device",null,null],[4,"WlKeyboardEvent","","",null,null],[13,"Keymap","","keyboard mapping",19,null],[13,"Enter","","enter event",19,null],[13,"Leave","","leave event",19,null],[13,"Key","","key event",19,null],[13,"Modifiers","","modifier and group state",19,null],[13,"RepeatInfo","","repeat rate and delay",19,null],[4,"WlPointerEvent","","",null,null],[13,"Enter","","enter event",20,null],[13,"Leave","","leave event",20,null],[13,"Motion","","pointer motion event",20,null],[13,"Button","","pointer button event",20,null],[13,"Axis","","axis event",20,null],[13,"Frame","","end of a pointer event sequence",20,null],[13,"AxisSource","","axis source event",20,null],[13,"AxisStop","","axis stop event",20,null],[13,"AxisDiscrete","","axis click event",20,null],[4,"WlSeatEvent","","",null,null],[13,"Capabilities","","seat capabilities changed",21,null],[13,"Name","","unique identifier for this seat",21,null],[4,"WlTouchEvent","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",22,null],[13,"Up","","end of a touch event sequence",22,null],[13,"Motion","","update of touch point coordinates",22,null],[13,"Frame","","end of touch frame event",22,null],[13,"Cancel","","touch session cancelled",22,null],[4,"WlKeyboardKeyState","","physical key state",null,null],[13,"Released","","key is not pressed",23,null],[13,"Pressed","","key is pressed",23,null],[4,"WlKeyboardKeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",24,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",24,null],[4,"WlPointerAxis","","axis types",null,null],[13,"VerticalScroll","","",25,null],[13,"HorizontalScroll","","",25,null],[4,"WlPointerButtonState","","physical button state",null,null],[13,"Released","","The button is not pressed",26,null],[13,"Pressed","","The button is pressed",26,null],[4,"WlPointerAxisSource","","axis source types",null,null],[13,"Wheel","","A physical wheel",27,null],[13,"Finger","","Finger on a touch surface",27,null],[13,"Continuous","","Continuous coordinate space",27,null],[0,"WlSeatCapability","","seat capability bitmask",null,null],[3,"WlSeatCapability","wayland_client::wayland::seat::WlSeatCapability","",null,null],[17,"Pointer","","The seat has pointer devices",null,null],[17,"Keyboard","","The seat has one or more keyboards",null,null],[17,"Touch","","The seat has touch devices",null,null],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"eq","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"from_iter","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"t"}],"output":{"name":"wlseatcapability"}}],[0,"shell","wayland_client::wayland","",null,null],[3,"WlShell","wayland_client::wayland::shell","create desktop-style surfaces",null,null],[3,"WlShellSurface","","desktop-style metadata interface",null,null],[4,"WlShellSurfaceEvent","","",null,null],[13,"Ping","","ping client",29,null],[13,"Configure","","suggest resize",29,null],[13,"PopupDone","","popup interaction is done",29,null],[4,"WlShellSurfaceFullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",30,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",30,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",30,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",30,null],[0,"WlShellSurfaceResize","","edge values for resizing",null,null],[3,"WlShellSurfaceResize","wayland_client::wayland::shell::WlShellSurfaceResize","",null,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[11,"hash","","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"eq","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"from_iter","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[0,"WlShellSurfaceTransient","wayland_client::wayland::shell","details of transient behaviour",null,null],[3,"WlShellSurfaceTransient","wayland_client::wayland::shell::WlShellSurfaceTransient","",null,null],[17,"Inactive","","do not set keyboard focus",null,null],[11,"hash","","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"eq","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"from_iter","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[0,"shm","wayland_client::wayland","",null,null],[3,"WlBuffer","wayland_client::wayland::shm","content for a wl_surface",null,null],[3,"WlShm","","shared memory support",null,null],[3,"WlShmPool","","a shared memory pool",null,null],[4,"WlBufferEvent","","",null,null],[13,"Release","","compositor releases buffer",33,null],[4,"WlShmEvent","","",null,null],[13,"Format","","pixel format description",34,null],[4,"WlShmFormat","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format",35,null],[13,"Xrgb8888","","32-bit RGB format",35,null],[13,"C8","","",35,null],[13,"Rgb332","","",35,null],[13,"Bgr233","","",35,null],[13,"Xrgb4444","","",35,null],[13,"Xbgr4444","","",35,null],[13,"Rgbx4444","","",35,null],[13,"Bgrx4444","","",35,null],[13,"Argb4444","","",35,null],[13,"Abgr4444","","",35,null],[13,"Rgba4444","","",35,null],[13,"Bgra4444","","",35,null],[13,"Xrgb1555","","",35,null],[13,"Xbgr1555","","",35,null],[13,"Rgbx5551","","",35,null],[13,"Bgrx5551","","",35,null],[13,"Argb1555","","",35,null],[13,"Abgr1555","","",35,null],[13,"Rgba5551","","",35,null],[13,"Bgra5551","","",35,null],[13,"Rgb565","","",35,null],[13,"Bgr565","","",35,null],[13,"Rgb888","","",35,null],[13,"Bgr888","","",35,null],[13,"Xbgr8888","","",35,null],[13,"Rgbx8888","","",35,null],[13,"Bgrx8888","","",35,null],[13,"Abgr8888","","",35,null],[13,"Rgba8888","","",35,null],[13,"Bgra8888","","",35,null],[13,"Xrgb2101010","","",35,null],[13,"Xbgr2101010","","",35,null],[13,"Rgbx1010102","","",35,null],[13,"Bgrx1010102","","",35,null],[13,"Argb2101010","","",35,null],[13,"Abgr2101010","","",35,null],[13,"Rgba1010102","","",35,null],[13,"Bgra1010102","","",35,null],[13,"Yuyv","","",35,null],[13,"Yvyu","","",35,null],[13,"Uyvy","","",35,null],[13,"Vyuy","","",35,null],[13,"Ayuv","","",35,null],[13,"Nv12","","",35,null],[13,"Nv21","","",35,null],[13,"Nv16","","",35,null],[13,"Nv61","","",35,null],[13,"Yuv410","","",35,null],[13,"Yvu410","","",35,null],[13,"Yuv411","","",35,null],[13,"Yvu411","","",35,null],[13,"Yuv420","","",35,null],[13,"Yvu420","","",35,null],[13,"Yuv422","","",35,null],[13,"Yvu422","","",35,null],[13,"Yuv444","","",35,null],[13,"Yvu444","","",35,null],[0,"subcompositor","wayland_client::wayland","",null,null],[3,"WlSubcompositor","wayland_client::wayland::subcompositor","sub-surface compositing",null,null],[3,"WlSubsurface","","sub-surface interface to a wl_surface",null,null],[11,"sync_roundtrip","wayland_client::wayland","Synchronous roundtrip",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"dispatch","","Blocking dispatch",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"dispatch_pending","","Non-blocking dispatch",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"prepare_read","","Prepare an conccurent read",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"option"}}],[11,"flush","","Non-blocking write to the server",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"result"}}],[11,"drop","","",36,{"inputs":[{"name":"wldisplay"}],"output":null}],[11,"read_events","","Read events",37,{"inputs":[{"name":"readeventsguard"}],"output":{"name":"result"}}],[11,"cancel","","Cancel the read",37,{"inputs":[{"name":"readeventsguard"}],"output":null}],[11,"drop","","",37,{"inputs":[{"name":"readeventsguard"}],"output":null}],[8,"Proxy","wayland_client","",null,null],[10,"ptr","","",38,null],[10,"interface","","",38,null],[10,"interface_name","","The internal name of this interface, as advertized by the registry if it is a global.",38,{"inputs":[{"name":"proxy"}],"output":{"name":"str"}}],[10,"version","","The maximum version of this interface handled by the library.",38,{"inputs":[{"name":"proxy"}],"output":{"name":"u32"}}],[10,"id","","Get the id of this proxy",38,{"inputs":[{"name":"proxy"}],"output":{"name":"proxyid"}}],[10,"from_ptr","","Creates a proxy from a fresh ptr",38,null],[10,"from_ptr_no_own","","Creates a proxy from a ptr that is managed elsewhere",38,null],[10,"set_evt_iterator","","Set the event iterator associated to this proxy",38,{"inputs":[{"name":"proxy"},{"name":"eventiterator"}],"output":null}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"proxyid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"proxyid"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"proxyid"},{"name":"proxyid"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"proxyid"}],"output":{"name":"proxyid"}}],[14,"wayland_env!","","This macro allows you to create a simple wayland environment handler.",null,null],[11,"hash","wayland_client::wayland::data_device::WlDataDeviceManagerDndAction","",14,null],[11,"cmp","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"eq","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"from_iter","","",14,{"inputs":[{"name":"wldatadevicemanagerdndaction"},{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceResize","",31,null],[11,"cmp","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"eq","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"sub","","Returns the set difference of the two sets of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"not","","Returns the complement of this set of flags.",31,{"inputs":[{"name":"wlshellsurfaceresize"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"from_iter","","",31,{"inputs":[{"name":"wlshellsurfaceresize"},{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceTransient","",32,null],[11,"cmp","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"eq","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"sub","","Returns the set difference of the two sets of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"not","","Returns the complement of this set of flags.",32,{"inputs":[{"name":"wlshellsurfacetransient"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"from_iter","","",32,{"inputs":[{"name":"wlshellsurfacetransient"},{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"hash","wayland_client::wayland::seat::WlSeatCapability","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"eq","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"wlseatcapability"},{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"wlseatcapability"}],"output":{"name":"wlseatcapability"}}],[11,"from_iter","","",28,{"inputs":[{"name":"wlseatcapability"},{"name":"t"}],"output":{"name":"wlseatcapability"}}],[11,"hash","wayland_client::wayland::output::WlOutputMode","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"eq","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"wloutputmode"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",18,{"inputs":[{"name":"wloutputmode"},{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"not","","Returns the complement of this set of flags.",18,{"inputs":[{"name":"wloutputmode"}],"output":{"name":"wloutputmode"}}],[11,"from_iter","","",18,{"inputs":[{"name":"wloutputmode"},{"name":"t"}],"output":{"name":"wloutputmode"}}],[11,"fmt","wayland_client::wayland","",9,{"inputs":[{"name":"waylandprotocolevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ptr","","",36,null],[11,"interface","","",36,null],[11,"interface_name","","",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"str"}}],[11,"version","","",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"u32"}}],[11,"id","","",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",36,null],[11,"from_ptr_no_own","","",36,null],[11,"set_evt_iterator","","",36,{"inputs":[{"name":"wldisplay"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"wldisplay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"wldisplayevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sync","","asynchronous roundtrip",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"wlcallback"}}],[11,"get_registry","","get global registry object",36,{"inputs":[{"name":"wldisplay"}],"output":{"name":"wlregistry"}}],[11,"ptr","","",40,null],[11,"interface","","",40,null],[11,"interface_name","","",40,{"inputs":[{"name":"wlregistry"}],"output":{"name":"str"}}],[11,"version","","",40,{"inputs":[{"name":"wlregistry"}],"output":{"name":"u32"}}],[11,"id","","",40,{"inputs":[{"name":"wlregistry"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",40,null],[11,"from_ptr_no_own","","",40,null],[11,"set_evt_iterator","","",40,{"inputs":[{"name":"wlregistry"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",40,{"inputs":[{"name":"wlregistry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"wlregistryevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","bind an object to the display",40,{"inputs":[{"name":"wlregistry"},{"name":"u32"},{"name":"u32"}],"output":{"name":"t"}}],[11,"drop","","",40,{"inputs":[{"name":"wlregistry"}],"output":null}],[11,"ptr","","",41,null],[11,"interface","","",41,null],[11,"interface_name","","",41,{"inputs":[{"name":"wlcallback"}],"output":{"name":"str"}}],[11,"version","","",41,{"inputs":[{"name":"wlcallback"}],"output":{"name":"u32"}}],[11,"id","","",41,{"inputs":[{"name":"wlcallback"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",41,null],[11,"from_ptr_no_own","","",41,null],[11,"set_evt_iterator","","",41,{"inputs":[{"name":"wlcallback"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",41,{"inputs":[{"name":"wlcallback"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"wlcallbackevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",41,{"inputs":[{"name":"wlcallback"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",42,null],[11,"interface","","",42,null],[11,"interface_name","","",42,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"str"}}],[11,"version","","",42,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"u32"}}],[11,"id","","",42,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",42,null],[11,"from_ptr_no_own","","",42,null],[11,"set_evt_iterator","","",42,{"inputs":[{"name":"wlcompositor"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"wlcompositor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_surface","","create new surface",42,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"wlsurface"}}],[11,"create_region","","create new region",42,{"inputs":[{"name":"wlcompositor"}],"output":{"name":"wlregion"}}],[11,"drop","","",42,{"inputs":[{"name":"wlcompositor"}],"output":null}],[11,"ptr","wayland_client::wayland::shm","",43,null],[11,"interface","","",43,null],[11,"interface_name","","",43,{"inputs":[{"name":"wlshmpool"}],"output":{"name":"str"}}],[11,"version","","",43,{"inputs":[{"name":"wlshmpool"}],"output":{"name":"u32"}}],[11,"id","","",43,{"inputs":[{"name":"wlshmpool"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",43,null],[11,"from_ptr_no_own","","",43,null],[11,"set_evt_iterator","","",43,{"inputs":[{"name":"wlshmpool"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"wlshmpool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_buffer","","create a buffer from the pool",43,{"inputs":[{"name":"wlshmpool"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":{"name":"wlbuffer"}}],[11,"destroy","","destroy the pool",43,{"inputs":[{"name":"wlshmpool"}],"output":null}],[11,"resize","","change the size of the pool mapping",43,{"inputs":[{"name":"wlshmpool"},{"name":"i32"}],"output":null}],[11,"drop","","",43,{"inputs":[{"name":"wlshmpool"}],"output":null}],[11,"ptr","","",44,null],[11,"interface","","",44,null],[11,"interface_name","","",44,{"inputs":[{"name":"wlshm"}],"output":{"name":"str"}}],[11,"version","","",44,{"inputs":[{"name":"wlshm"}],"output":{"name":"u32"}}],[11,"id","","",44,{"inputs":[{"name":"wlshm"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",44,null],[11,"from_ptr_no_own","","",44,null],[11,"set_evt_iterator","","",44,{"inputs":[{"name":"wlshm"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",44,{"inputs":[{"name":"wlshm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"wlshmformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"wlshmevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_pool","","create a shm pool",44,{"inputs":[{"name":"wlshm"},{"name":"rawfd"},{"name":"i32"}],"output":{"name":"wlshmpool"}}],[11,"drop","","",44,{"inputs":[{"name":"wlshm"}],"output":null}],[11,"ptr","","",45,null],[11,"interface","","",45,null],[11,"interface_name","","",45,{"inputs":[{"name":"wlbuffer"}],"output":{"name":"str"}}],[11,"version","","",45,{"inputs":[{"name":"wlbuffer"}],"output":{"name":"u32"}}],[11,"id","","",45,{"inputs":[{"name":"wlbuffer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",45,null],[11,"from_ptr_no_own","","",45,null],[11,"set_evt_iterator","","",45,{"inputs":[{"name":"wlbuffer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"wlbuffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"wlbufferevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy a buffer",45,{"inputs":[{"name":"wlbuffer"}],"output":null}],[11,"drop","","",45,{"inputs":[{"name":"wlbuffer"}],"output":null}],[11,"ptr","wayland_client::wayland::data_device","",46,null],[11,"interface","","",46,null],[11,"interface_name","","",46,{"inputs":[{"name":"wldataoffer"}],"output":{"name":"str"}}],[11,"version","","",46,{"inputs":[{"name":"wldataoffer"}],"output":{"name":"u32"}}],[11,"id","","",46,{"inputs":[{"name":"wldataoffer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",46,null],[11,"from_ptr_no_own","","",46,null],[11,"set_evt_iterator","","",46,{"inputs":[{"name":"wldataoffer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"wldataoffer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"wldataofferevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"accept","","accept one of the offered mime types",46,{"inputs":[{"name":"wldataoffer"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"receive","","request that the data is transferred",46,{"inputs":[{"name":"wldataoffer"},{"name":"string"},{"name":"rawfd"}],"output":null}],[11,"destroy","","destroy data offer",46,{"inputs":[{"name":"wldataoffer"}],"output":null}],[11,"finish","","the offer will no longer be used",46,{"inputs":[{"name":"wldataoffer"}],"output":null}],[11,"set_actions","","set the available/preferred drag-and-drop actions",46,{"inputs":[{"name":"wldataoffer"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"drop","","",46,{"inputs":[{"name":"wldataoffer"}],"output":null}],[11,"ptr","","",47,null],[11,"interface","","",47,null],[11,"interface_name","","",47,{"inputs":[{"name":"wldatasource"}],"output":{"name":"str"}}],[11,"version","","",47,{"inputs":[{"name":"wldatasource"}],"output":{"name":"u32"}}],[11,"id","","",47,{"inputs":[{"name":"wldatasource"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",47,null],[11,"from_ptr_no_own","","",47,null],[11,"set_evt_iterator","","",47,{"inputs":[{"name":"wldatasource"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",47,{"inputs":[{"name":"wldatasource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"wldatasourceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"offer","","add an offered mime type",47,{"inputs":[{"name":"wldatasource"},{"name":"string"}],"output":null}],[11,"destroy","","destroy the data source",47,{"inputs":[{"name":"wldatasource"}],"output":null}],[11,"set_actions","","set the available drag-and-drop actions",47,{"inputs":[{"name":"wldatasource"},{"name":"u32"}],"output":null}],[11,"drop","","",47,{"inputs":[{"name":"wldatasource"}],"output":null}],[11,"ptr","","",48,null],[11,"interface","","",48,null],[11,"interface_name","","",48,{"inputs":[{"name":"wldatadevice"}],"output":{"name":"str"}}],[11,"version","","",48,{"inputs":[{"name":"wldatadevice"}],"output":{"name":"u32"}}],[11,"id","","",48,{"inputs":[{"name":"wldatadevice"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",48,null],[11,"from_ptr_no_own","","",48,null],[11,"set_evt_iterator","","",48,{"inputs":[{"name":"wldatadevice"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"wldatadevice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"wldatadeviceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"start_drag","","start drag-and-drop operation",48,{"inputs":[{"name":"wldatadevice"},{"name":"option"},{"name":"wlsurface"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"set_selection","","copy data to the selection",48,{"inputs":[{"name":"wldatadevice"},{"name":"option"},{"name":"u32"}],"output":null}],[11,"release","","destroy data device",48,{"inputs":[{"name":"wldatadevice"}],"output":null}],[11,"drop","","",48,{"inputs":[{"name":"wldatadevice"}],"output":null}],[11,"ptr","","",49,null],[11,"interface","","",49,null],[11,"interface_name","","",49,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"str"}}],[11,"version","","",49,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"u32"}}],[11,"id","","",49,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",49,null],[11,"from_ptr_no_own","","",49,null],[11,"set_evt_iterator","","",49,{"inputs":[{"name":"wldatadevicemanager"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",49,{"inputs":[{"name":"wldatadevicemanager"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_data_source","","create a new data source",49,{"inputs":[{"name":"wldatadevicemanager"}],"output":{"name":"wldatasource"}}],[11,"get_data_device","","create a new data device",49,{"inputs":[{"name":"wldatadevicemanager"},{"name":"wlseat"}],"output":{"name":"wldatadevice"}}],[11,"drop","","",49,{"inputs":[{"name":"wldatadevicemanager"}],"output":null}],[11,"ptr","wayland_client::wayland::shell","",50,null],[11,"interface","","",50,null],[11,"interface_name","","",50,{"inputs":[{"name":"wlshell"}],"output":{"name":"str"}}],[11,"version","","",50,{"inputs":[{"name":"wlshell"}],"output":{"name":"u32"}}],[11,"id","","",50,{"inputs":[{"name":"wlshell"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",50,null],[11,"from_ptr_no_own","","",50,null],[11,"set_evt_iterator","","",50,{"inputs":[{"name":"wlshell"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"wlshell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_shell_surface","","create a shell surface from a surface",50,{"inputs":[{"name":"wlshell"},{"name":"wlsurface"}],"output":{"name":"wlshellsurface"}}],[11,"drop","","",50,{"inputs":[{"name":"wlshell"}],"output":null}],[11,"ptr","","",51,null],[11,"interface","","",51,null],[11,"interface_name","","",51,{"inputs":[{"name":"wlshellsurface"}],"output":{"name":"str"}}],[11,"version","","",51,{"inputs":[{"name":"wlshellsurface"}],"output":{"name":"u32"}}],[11,"id","","",51,{"inputs":[{"name":"wlshellsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",51,null],[11,"from_ptr_no_own","","",51,null],[11,"set_evt_iterator","","",51,{"inputs":[{"name":"wlshellsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"wlshellsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"wlshellsurfacefullscreenmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"wlshellsurfaceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pong","","respond to a ping event",51,{"inputs":[{"name":"wlshellsurface"},{"name":"u32"}],"output":null}],[11,"move_","","start an interactive move",51,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"}],"output":null}],[11,"resize","","start an interactive resize",51,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"},{"name":"wlshellsurfaceresize"}],"output":null}],[11,"set_toplevel","","make the surface a toplevel surface",51,{"inputs":[{"name":"wlshellsurface"}],"output":null}],[11,"set_transient","","make the surface a transient surface",51,{"inputs":[{"name":"wlshellsurface"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_fullscreen","","make the surface a fullscreen surface",51,{"inputs":[{"name":"wlshellsurface"},{"name":"wlshellsurfacefullscreenmethod"},{"name":"u32"},{"name":"option"}],"output":null}],[11,"set_popup","","make the surface a popup surface",51,{"inputs":[{"name":"wlshellsurface"},{"name":"wlseat"},{"name":"u32"},{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"wlshellsurfacetransient"}],"output":null}],[11,"set_maximized","","make the surface a maximized surface",51,{"inputs":[{"name":"wlshellsurface"},{"name":"option"}],"output":null}],[11,"set_title","","set surface title",51,{"inputs":[{"name":"wlshellsurface"},{"name":"string"}],"output":null}],[11,"set_class","","set surface class",51,{"inputs":[{"name":"wlshellsurface"},{"name":"string"}],"output":null}],[11,"drop","","",51,{"inputs":[{"name":"wlshellsurface"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",52,null],[11,"interface","","",52,null],[11,"interface_name","","",52,{"inputs":[{"name":"wlsurface"}],"output":{"name":"str"}}],[11,"version","","",52,{"inputs":[{"name":"wlsurface"}],"output":{"name":"u32"}}],[11,"id","","",52,{"inputs":[{"name":"wlsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",52,null],[11,"from_ptr_no_own","","",52,null],[11,"set_evt_iterator","","",52,{"inputs":[{"name":"wlsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"wlsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"wlsurfaceevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","delete surface",52,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"attach","","set the surface contents",52,{"inputs":[{"name":"wlsurface"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"damage","","mark part of the surface damaged",52,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"frame","","request a frame throttling hint",52,{"inputs":[{"name":"wlsurface"}],"output":{"name":"wlcallback"}}],[11,"set_opaque_region","","set opaque region",52,{"inputs":[{"name":"wlsurface"},{"name":"option"}],"output":null}],[11,"set_input_region","","set input region",52,{"inputs":[{"name":"wlsurface"},{"name":"option"}],"output":null}],[11,"commit","","commit pending surface state",52,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"set_buffer_transform","","sets the buffer transformation",52,{"inputs":[{"name":"wlsurface"},{"name":"i32"}],"output":null}],[11,"set_buffer_scale","","sets the buffer scaling factor",52,{"inputs":[{"name":"wlsurface"},{"name":"i32"}],"output":null}],[11,"damage_buffer","","mark part of the surface damaged using buffer co-ordinates",52,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"drop","","",52,{"inputs":[{"name":"wlsurface"}],"output":null}],[11,"ptr","wayland_client::wayland::seat","",53,null],[11,"interface","","",53,null],[11,"interface_name","","",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"str"}}],[11,"version","","",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"u32"}}],[11,"id","","",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",53,null],[11,"from_ptr_no_own","","",53,null],[11,"set_evt_iterator","","",53,{"inputs":[{"name":"wlseat"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"wlseat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"wlseatevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_pointer","","return pointer object",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"wlpointer"}}],[11,"get_keyboard","","return keyboard object",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"wlkeyboard"}}],[11,"get_touch","","return touch object",53,{"inputs":[{"name":"wlseat"}],"output":{"name":"wltouch"}}],[11,"release","","release the seat object",53,{"inputs":[{"name":"wlseat"}],"output":null}],[11,"drop","","",53,{"inputs":[{"name":"wlseat"}],"output":null}],[11,"ptr","","",54,null],[11,"interface","","",54,null],[11,"interface_name","","",54,{"inputs":[{"name":"wlpointer"}],"output":{"name":"str"}}],[11,"version","","",54,{"inputs":[{"name":"wlpointer"}],"output":{"name":"u32"}}],[11,"id","","",54,{"inputs":[{"name":"wlpointer"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",54,null],[11,"from_ptr_no_own","","",54,null],[11,"set_evt_iterator","","",54,{"inputs":[{"name":"wlpointer"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"wlpointer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"wlpointerbuttonstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"wlpointeraxis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"wlpointeraxissource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"wlpointerevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_cursor","","set the pointer surface",54,{"inputs":[{"name":"wlpointer"},{"name":"u32"},{"name":"option"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"release","","release the pointer object",54,{"inputs":[{"name":"wlpointer"}],"output":null}],[11,"drop","","",54,{"inputs":[{"name":"wlpointer"}],"output":null}],[11,"ptr","","",55,null],[11,"interface","","",55,null],[11,"interface_name","","",55,{"inputs":[{"name":"wlkeyboard"}],"output":{"name":"str"}}],[11,"version","","",55,{"inputs":[{"name":"wlkeyboard"}],"output":{"name":"u32"}}],[11,"id","","",55,{"inputs":[{"name":"wlkeyboard"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",55,null],[11,"from_ptr_no_own","","",55,null],[11,"set_evt_iterator","","",55,{"inputs":[{"name":"wlkeyboard"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"wlkeyboard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"wlkeyboardkeymapformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"wlkeyboardkeystate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"wlkeyboardevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the keyboard object",55,{"inputs":[{"name":"wlkeyboard"}],"output":null}],[11,"drop","","",55,{"inputs":[{"name":"wlkeyboard"}],"output":null}],[11,"ptr","","",56,null],[11,"interface","","",56,null],[11,"interface_name","","",56,{"inputs":[{"name":"wltouch"}],"output":{"name":"str"}}],[11,"version","","",56,{"inputs":[{"name":"wltouch"}],"output":{"name":"u32"}}],[11,"id","","",56,{"inputs":[{"name":"wltouch"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",56,null],[11,"from_ptr_no_own","","",56,null],[11,"set_evt_iterator","","",56,{"inputs":[{"name":"wltouch"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"wltouch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"wltouchevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"release","","release the touch object",56,{"inputs":[{"name":"wltouch"}],"output":null}],[11,"drop","","",56,{"inputs":[{"name":"wltouch"}],"output":null}],[11,"ptr","wayland_client::wayland::output","",57,null],[11,"interface","","",57,null],[11,"interface_name","","",57,{"inputs":[{"name":"wloutput"}],"output":{"name":"str"}}],[11,"version","","",57,{"inputs":[{"name":"wloutput"}],"output":{"name":"u32"}}],[11,"id","","",57,{"inputs":[{"name":"wloutput"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",57,null],[11,"from_ptr_no_own","","",57,null],[11,"set_evt_iterator","","",57,{"inputs":[{"name":"wloutput"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"wloutput"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"wloutputsubpixel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"wloutputtransform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"wloutputevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",57,{"inputs":[{"name":"wloutput"}],"output":null}],[11,"ptr","wayland_client::wayland::compositor","",58,null],[11,"interface","","",58,null],[11,"interface_name","","",58,{"inputs":[{"name":"wlregion"}],"output":{"name":"str"}}],[11,"version","","",58,{"inputs":[{"name":"wlregion"}],"output":{"name":"u32"}}],[11,"id","","",58,{"inputs":[{"name":"wlregion"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",58,null],[11,"from_ptr_no_own","","",58,null],[11,"set_evt_iterator","","",58,{"inputs":[{"name":"wlregion"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"wlregion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","destroy region",58,{"inputs":[{"name":"wlregion"}],"output":null}],[11,"add","","add rectangle to region",58,{"inputs":[{"name":"wlregion"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"subtract","","subtract rectangle from region",58,{"inputs":[{"name":"wlregion"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"drop","","",58,{"inputs":[{"name":"wlregion"}],"output":null}],[11,"ptr","wayland_client::wayland::subcompositor","",59,null],[11,"interface","","",59,null],[11,"interface_name","","",59,{"inputs":[{"name":"wlsubcompositor"}],"output":{"name":"str"}}],[11,"version","","",59,{"inputs":[{"name":"wlsubcompositor"}],"output":{"name":"u32"}}],[11,"id","","",59,{"inputs":[{"name":"wlsubcompositor"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",59,null],[11,"from_ptr_no_own","","",59,null],[11,"set_evt_iterator","","",59,{"inputs":[{"name":"wlsubcompositor"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",59,{"inputs":[{"name":"wlsubcompositor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","unbind from the subcompositor interface",59,{"inputs":[{"name":"wlsubcompositor"}],"output":null}],[11,"get_subsurface","","give a surface the role sub-surface",59,{"inputs":[{"name":"wlsubcompositor"},{"name":"wlsurface"},{"name":"wlsurface"}],"output":{"name":"wlsubsurface"}}],[11,"drop","","",59,{"inputs":[{"name":"wlsubcompositor"}],"output":null}],[11,"ptr","","",60,null],[11,"interface","","",60,null],[11,"interface_name","","",60,{"inputs":[{"name":"wlsubsurface"}],"output":{"name":"str"}}],[11,"version","","",60,{"inputs":[{"name":"wlsubsurface"}],"output":{"name":"u32"}}],[11,"id","","",60,{"inputs":[{"name":"wlsubsurface"}],"output":{"name":"proxyid"}}],[11,"from_ptr","","",60,null],[11,"from_ptr_no_own","","",60,null],[11,"set_evt_iterator","","",60,{"inputs":[{"name":"wlsubsurface"},{"name":"eventiterator"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"wlsubsurface"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"destroy","","remove sub-surface interface",60,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"set_position","","reposition the sub-surface",60,{"inputs":[{"name":"wlsubsurface"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"place_above","","restack the sub-surface",60,{"inputs":[{"name":"wlsubsurface"},{"name":"wlsurface"}],"output":null}],[11,"place_below","","restack the sub-surface",60,{"inputs":[{"name":"wlsubsurface"},{"name":"wlsurface"}],"output":null}],[11,"set_sync","","set sub-surface to synchronized mode",60,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"set_desync","","set sub-surface to desynchronized mode",60,{"inputs":[{"name":"wlsubsurface"}],"output":null}],[11,"drop","","",60,{"inputs":[{"name":"wlsubsurface"}],"output":null}]],"paths":[[4,"Event"],[3,"EventIterator"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[4,"WlCallbackEvent"],[4,"WlDisplayEvent"],[4,"WlRegistryEvent"],[4,"WaylandProtocolEvent"],[4,"WlSurfaceEvent"],[4,"WlDataDeviceEvent"],[4,"WlDataOfferEvent"],[4,"WlDataSourceEvent"],[3,"WlDataDeviceManagerDndAction"],[4,"WlOutputEvent"],[4,"WlOutputSubpixel"],[4,"WlOutputTransform"],[3,"WlOutputMode"],[4,"WlKeyboardEvent"],[4,"WlPointerEvent"],[4,"WlSeatEvent"],[4,"WlTouchEvent"],[4,"WlKeyboardKeyState"],[4,"WlKeyboardKeymapFormat"],[4,"WlPointerAxis"],[4,"WlPointerButtonState"],[4,"WlPointerAxisSource"],[3,"WlSeatCapability"],[4,"WlShellSurfaceEvent"],[4,"WlShellSurfaceFullscreenMethod"],[3,"WlShellSurfaceResize"],[3,"WlShellSurfaceTransient"],[4,"WlBufferEvent"],[4,"WlShmEvent"],[4,"WlShmFormat"],[3,"WlDisplay"],[3,"ReadEventsGuard"],[8,"Proxy"],[3,"ProxyId"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"WlShell"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"]]};
searchIndex['wayland_scanner'] = {"items":[],"paths":[]};
searchIndex['wayland_sys'] = {"items":[[0,"","wayland_sys","FFI bindings to the wayland system libraries.",null,null],[11,"clone","libc::unix","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::notbsd","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",19,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",20,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",21,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",22,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",23,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",24,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","libc::unix::notbsd::linux","",25,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",26,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",27,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",28,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",29,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",30,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",31,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",32,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",33,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",34,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",35,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",36,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",37,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",38,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",39,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",40,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",41,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",42,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",43,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",44,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",45,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",46,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",47,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",48,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",49,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",50,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","libc::unix::notbsd::linux::other::b64","",51,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",52,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",53,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",54,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",55,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",56,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[6,"pid_t","wayland_sys","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[0,"common","","Various types and functions that are used by both the client and the server\nlibraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",57,null],[12,"signature","","",57,null],[12,"types","","",57,null],[3,"wl_interface","","",null,null],[12,"name","","",58,null],[12,"version","","",58,null],[12,"request_count","","",58,null],[12,"requests","","",58,null],[12,"event_count","","",58,null],[12,"events","","",58,null],[3,"wl_list","","",null,null],[12,"prev","","",59,null],[12,"next","","",59,null],[3,"wl_array","","",null,null],[12,"size","","",60,null],[12,"alloc","","",60,null],[12,"data","","",60,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",61,null],[12,"wl_display_connect","","",61,null],[12,"wl_display_disconnect","","",61,null],[12,"wl_display_get_fd","","",61,null],[12,"wl_display_roundtrip","","",61,null],[12,"wl_display_read_events","","",61,null],[12,"wl_display_prepare_read","","",61,null],[12,"wl_display_cancel_read","","",61,null],[12,"wl_display_dispatch","","",61,null],[12,"wl_display_dispatch_pending","","",61,null],[12,"wl_display_get_error","","",61,null],[12,"wl_display_get_protocol_error","","",61,null],[12,"wl_display_flush","","",61,null],[12,"wl_event_queue_destroy","","",61,null],[12,"wl_display_create_queue","","",61,null],[12,"wl_display_roundtrip_queue","","",61,null],[12,"wl_display_prepare_read_queue","","",61,null],[12,"wl_display_dispatch_queue","","",61,null],[12,"wl_display_dispatch_queue_pending","","",61,null],[12,"wl_proxy_create","","",61,null],[12,"wl_proxy_destroy","","",61,null],[12,"wl_proxy_add_listener","","",61,null],[12,"wl_proxy_get_listener","","",61,null],[12,"wl_proxy_add_dispatcher","","",61,null],[12,"wl_proxy_marshal_array_constructor","","",61,null],[12,"wl_proxy_marshal_array","","",61,null],[12,"wl_proxy_set_user_data","","",61,null],[12,"wl_proxy_get_user_data","","",61,null],[12,"wl_proxy_get_id","","",61,null],[12,"wl_proxy_get_class","","",61,null],[12,"wl_proxy_set_queue","","",61,null],[12,"wl_log_set_handler_client","","",61,null],[12,"wl_list_init","","",61,null],[12,"wl_list_insert","","",61,null],[12,"wl_list_remove","","",61,null],[12,"wl_list_length","","",61,null],[12,"wl_list_empty","","",61,null],[12,"wl_list_insert_list","","",61,null],[12,"wl_array_init","","",61,null],[12,"wl_array_release","","",61,null],[12,"wl_array_add","","",61,null],[12,"wl_array_copy","","",61,null],[12,"wl_proxy_marshal_constructor","","",61,null],[12,"wl_proxy_marshal","","",61,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",61,{"inputs":[{"name":"waylandclient"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",62,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",62,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",62,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",62,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",62,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",62,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",62,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",62,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",62,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",62,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",62,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",62,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",62,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",62,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",62,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",62,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",62,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",62,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",63,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",63,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",63,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",63,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",64,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",65,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",66,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",66,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",66,null],[11,"clone","","",67,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",67,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",67,null],[11,"fmt","","",68,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",69,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",69,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",70,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",71,null],[11,"eq","","",72,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",73,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",73,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",74,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",75,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",75,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",75,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",75,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",75,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",75,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",75,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",75,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",75,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",75,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",75,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",75,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",75,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",75,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",75,null],[11,"eq","","",75,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",75,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",75,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",75,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",76,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",76,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",76,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",76,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",76,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",76,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",76,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",76,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",76,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",76,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",76,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",76,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",76,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",76,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",76,null],[11,"eq","","",76,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",76,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",76,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",77,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",77,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",77,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",77,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",78,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",79,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",79,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",80,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",81,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",81,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",82,null],[11,"get","","Dereferences the content.",82,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",82,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",83,null],[11,"clone","","",83,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",84,null],[11,"eq","","",84,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",84,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",84,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",85,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",85,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",86,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",87,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",88,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",89,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",89,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",89,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","wayland_sys","",90,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",90,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",90,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",90,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",90,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",90,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",90,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",91,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",92,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",93,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",94,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",95,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",96,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",92,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",92,null],[11,"swap","","Stores a value into the bool, returning the old value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",92,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",93,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",93,null],[11,"swap","","Stores a value into the isize, returning the old value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",93,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",94,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",94,null],[11,"swap","","Stores a value into the usize, returning the old value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",94,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",95,null],[11,"load","","Loads a value from the pointer.",95,null],[11,"store","","Stores a value into the pointer.",95,null],[11,"swap","","Stores a value into the pointer, returning the old value.",95,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",95,null],[11,"fmt","","",94,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",97,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",97,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",97,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",97,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",97,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",97,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",97,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",98,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",99,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",99,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",99,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",99,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",99,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",99,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",99,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",99,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",99,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",101,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",101,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",101,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",101,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",102,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",102,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",103,null],[11,"deref","","",102,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",102,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",104,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",104,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",104,null],[11,"clone","core::char","",105,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",106,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",105,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"clone","","",107,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",108,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",107,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","core::iter","",109,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",109,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",110,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",111,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",113,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",112,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",112,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",112,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",112,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",114,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",115,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",116,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",117,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",118,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"nth","","",118,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",118,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",118,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",119,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",119,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",119,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",119,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",119,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",120,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"clone","","",121,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",121,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"clone","","",122,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",122,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",122,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",122,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",122,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"clone","","",123,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",123,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",123,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"clone","","",124,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",124,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"clone","","",125,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",125,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next_back","","",125,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",126,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",126,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",126,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",126,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",127,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",87,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",86,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",128,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"clone","","",129,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",129,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"next_back","","",129,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","core::ops","",86,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",130,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",130,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"next_back","","",130,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",131,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",131,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",131,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",131,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",132,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",132,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",132,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",62,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",62,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",133,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",133,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next_back","","",133,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next_back","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next_back","","",135,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",62,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",137,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",138,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",139,null],[11,"fmt","","",139,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",139,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",139,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",139,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",139,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",139,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",139,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",139,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",139,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",139,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",139,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",139,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",139,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",139,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",139,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",139,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",139,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",139,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",139,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",139,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",139,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",139,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next_back","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",141,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",142,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",139,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",143,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",143,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",144,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",145,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",145,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",146,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",147,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",148,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",149,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",150,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",151,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",152,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",151,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",152,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",151,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",152,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",151,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",152,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",151,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",152,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",147,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",148,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",149,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",150,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",143,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",144,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",145,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",146,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",153,null],[11,"next","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"count","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",153,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",154,null],[11,"next","","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"count","","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",154,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",155,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next_back","","",155,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",155,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",156,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",156,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next_back","","",156,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",157,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"next","","",158,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"next","","",159,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"next","","",160,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",160,null],[11,"next","","",161,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",161,null],[11,"clone","","",162,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",162,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[11,"count","","",162,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",162,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",162,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",163,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",163,null],[11,"count","","",163,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",163,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",163,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",164,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"count","","",164,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",164,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",164,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",164,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",165,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",166,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",167,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",166,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",166,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",166,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",168,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",169,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",170,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",171,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",172,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",173,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",171,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",175,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",175,null],[11,"matching","","",175,null],[11,"use_early_reject","","",176,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",176,null],[11,"matching","","",176,null],[11,"eq","core::str","",177,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",177,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",178,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",178,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",178,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",179,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",179,null],[11,"next_back","","",179,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",179,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",180,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",180,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",180,null],[11,"next_back","","",180,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",180,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",181,null],[11,"count","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",181,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",181,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",182,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",183,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",183,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",184,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",184,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",183,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",184,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",185,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",185,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",186,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",186,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",185,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",186,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",187,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",188,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",188,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",189,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",189,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",190,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",191,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",191,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",192,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",192,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",191,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",192,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",193,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",194,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",194,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",195,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",195,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",194,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",195,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",196,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",196,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"next_back","","",196,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",197,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",198,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",198,null],[11,"call_mut","","",198,null],[11,"call_once","","",198,null],[11,"next","","",197,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"next_back","","",197,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",199,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",200,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",200,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",200,null],[11,"finish","","",200,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",200,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",200,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",201,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",202,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",203,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",203,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",204,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",205,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",205,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",206,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",206,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",207,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",208,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",209,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",209,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",210,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",210,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",210,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",211,null],[11,"entry","","Adds a new entry to the set output.",212,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",212,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",212,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",213,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",213,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",213,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",214,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",215,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",216,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",217,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",217,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",218,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",219,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",220,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",220,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",221,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",222,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",223,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",223,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",223,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",224,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",224,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",224,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",224,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",224,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",224,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",224,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",224,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",224,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",224,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",224,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",224,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",224,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",224,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",224,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",84,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",97,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","wayland_sys::client","",225,{"inputs":[{"name":"wayland_client_option"}],"output":{"name":"option"}}],[11,"deref","","",226,{"inputs":[{"name":"wayland_client_handle"}],"output":{"name":"waylandclient"}}],[0,"server","wayland_sys","Bindings to the client library `libwayland-server.so`",null,null],[3,"WaylandServer","wayland_sys::server","",null,null],[12,"wl_client_flush","","",227,null],[12,"wl_client_destroy","","",227,null],[12,"wl_client_get_display","","",227,null],[12,"wl_client_get_credentials","","",227,null],[12,"wl_client_get_object","","",227,null],[12,"wl_client_add_destroy_listener","","",227,null],[12,"wl_client_get_destroy_listener","","",227,null],[12,"wl_client_post_no_memory","","",227,null],[12,"wl_resource_create","","",227,null],[12,"wl_client_create","","",227,null],[12,"wl_display_create","","",227,null],[12,"wl_display_destroy","","",227,null],[12,"wl_display_get_serial","","",227,null],[12,"wl_display_next_serial","","",227,null],[12,"wl_display_add_socket","","",227,null],[12,"wl_display_add_socket_auto","","",227,null],[12,"wl_display_add_shm_format","","",227,null],[12,"wl_display_get_additional_shm_formats","","",227,null],[12,"wl_display_get_event_loop","","",227,null],[12,"wl_display_terminate","","",227,null],[12,"wl_display_run","","",227,null],[12,"wl_display_flush_clients","","",227,null],[12,"wl_display_add_destroy_listener","","",227,null],[12,"wl_display_get_destroy_listener","","",227,null],[12,"wl_global_create","","",227,null],[12,"wl_display_init_shm","","",227,null],[12,"wl_event_loop_create","","",227,null],[12,"wl_event_loop_destroy","","",227,null],[12,"wl_event_loop_add_fd","","",227,null],[12,"wl_event_loop_fd_update","","",227,null],[12,"wl_event_lopp_add_timer","","",227,null],[12,"wl_event_loop_add_signal","","",227,null],[12,"wl_event_loop_dispatch","","",227,null],[12,"wl_event_loop_dispatch_idle","","",227,null],[12,"wl_event_loop_add_idle","","",227,null],[12,"wl_event_loop_get_fd","","",227,null],[12,"wl_event_loop_add_destroy_listener","","",227,null],[12,"wl_event_loop_get_destroy_listener","","",227,null],[12,"wl_event_source_timer_update","","",227,null],[12,"wl_event_source_remove","","",227,null],[12,"wl_event_source_check","","",227,null],[12,"wl_global_destroy","","",227,null],[12,"wl_resource_post_event_array","","",227,null],[12,"wl_resource_queue_event_array","","",227,null],[12,"wl_resource_post_no_memory","","",227,null],[12,"wl_resource_set_implementation","","",227,null],[12,"wl_resource_set_dispatcher","","",227,null],[12,"wl_resource_destroy","","",227,null],[12,"wl_resource_get_id","","",227,null],[12,"wl_resource_get_link","","",227,null],[12,"w_resource_from_link","","",227,null],[12,"wl_resource_find_for_client","","",227,null],[12,"wl_resource_set_user_data","","",227,null],[12,"wl_resource_get_user_data","","",227,null],[12,"wl_resource_get_version","","",227,null],[12,"wl_resource_set_destructor","","",227,null],[12,"wl_resource_instance_of","","",227,null],[12,"wl_resource_add_destroy_listener","","",227,null],[12,"wl_resource_get_destroy_listener","","",227,null],[12,"wl_shm_buffer_create","","",227,null],[12,"wl_shm_buffer_begin_access","","",227,null],[12,"wl_shm_buffer_end_access","","",227,null],[12,"wl_shm_buffer_get","","",227,null],[12,"wl_shm_buffer_get_data","","",227,null],[12,"wl_shm_buffer_get_stride","","",227,null],[12,"wl_shm_buffer_get_format","","",227,null],[12,"wl_shm_buffer_get_width","","",227,null],[12,"wl_shm_buffer_get_heigth","","",227,null],[12,"wl_log_set_handler_server","","",227,null],[12,"wl_list_init","","",227,null],[12,"wl_list_insert","","",227,null],[12,"wl_list_remove","","",227,null],[12,"wl_list_length","","",227,null],[12,"wl_list_empty","","",227,null],[12,"wl_list_insert_list","","",227,null],[12,"wl_array_init","","",227,null],[12,"wl_array_release","","",227,null],[12,"wl_array_add","","",227,null],[12,"wl_array_copy","","",227,null],[12,"wl_resource_post_event","","",227,null],[12,"wl_resource_queue_event","","",227,null],[12,"wl_resource_post_error","","",227,null],[3,"WAYLAND_SERVER_OPTION","","",null,null],[3,"WAYLAND_SERVER_HANDLE","","",null,null],[4,"wl_client","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_loop","","",null,null],[4,"wl_event_source","","",null,null],[4,"wl_global","","",null,null],[4,"wl_listener","","",null,null],[4,"wl_resource","","",null,null],[4,"wl_shm_buffer","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[6,"wl_event_loop_fd_func_t","","",null,null],[6,"wl_event_loop_timer_func_t","","",null,null],[6,"wl_event_loop_signal_func_t","","",null,null],[6,"wl_event_loop_idle_func_t","","",null,null],[6,"wl_global_bind_func_t","","",null,null],[6,"wl_notify_func_t","","",null,null],[6,"wl_resource_destroy_func_t","","",null,null],[11,"open","","",227,{"inputs":[{"name":"waylandserver"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",228,{"inputs":[{"name":"wayland_server_option"}],"output":{"name":"option"}}],[11,"deref","","",229,{"inputs":[{"name":"wayland_server_handle"}],"output":{"name":"waylandserver"}}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",230,null],[12,"wl_egl_window_destroy","","",230,null],[12,"wl_egl_window_resize","","",230,null],[12,"wl_egl_window_get_attached_size","","",230,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",230,{"inputs":[{"name":"waylandegl"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",231,{"inputs":[{"name":"wayland_egl_option"}],"output":{"name":"option"}}],[11,"deref","","",232,{"inputs":[{"name":"wayland_egl_handle"}],"output":{"name":"waylandegl"}}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",233,null],[12,"height","","actual height",233,null],[12,"hotspot_x","","hot spot x (must be inside image)",233,null],[12,"hotspot_y","","hot spot y (must be inside image)",233,null],[12,"delay","","animation delay to next frame",233,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",234,null],[12,"images","","",234,null],[12,"name","","",234,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",235,null],[12,"wl_cursor_theme_destroy","","",235,null],[12,"wl_cursor_theme_get_cursor","","",235,null],[12,"wl_cursor_image_get_buffer","","",235,null],[12,"wl_cursor_frame","","",235,null],[12,"wl_cursor_frame_and_duration","","",235,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",235,{"inputs":[{"name":"waylandcursor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",236,{"inputs":[{"name":"wayland_cursor_option"}],"output":{"name":"option"}}],[11,"deref","","",237,{"inputs":[{"name":"wayland_cursor_handle"}],"output":{"name":"waylandcursor"}}],[14,"ffi_dispatch!","wayland_sys","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandServer"],[3,"WAYLAND_SERVER_OPTION"],[3,"WAYLAND_SERVER_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
initSearch(searchIndex);
